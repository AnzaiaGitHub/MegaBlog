Esta es la historia que se va a guardar. La historia de su vida y la obra de su maestra.

Se escribió el 4-8-2022 a las 12:42 en Anzaia's Computer.

Comandos de Git:
$git init : inicializa el repositorio en la carpeta del proyecto.

$git add . : añade al Staging los cambios detectados.

$git commit -m "mensaje de commit" :sube al repositorio los cambios realizados con un mensaje obligatorio para saber qué se modificó en dicho commit.

$git commit -am "mensaje del commit" : hace git add de los cambios y git commit. (solo para archivos ya creados anteriormente)

$git show : muestra las diferencias entre el último commit y su anterior.

$git diff : muestra las diferencias entre el staging y el directorio actual.

$git diff #commitA #commitB : muestra la diferencias o modificaciones entre los commit A y B.

$git log : muestra todos los commits realizados en la rama que estamos ubicados.

$git log --stat : muestra todos los cambios específicos de cada archivo en cada commit (inserciones y supresiones) (oprimir Q para salir de la pantalla de log)

$git log --oneline : #commit + "descripcion del commit".

$git log --decorate : Muestra donde se encuentra el head point en el log.

$git log -p : explica el número de líneas que se cambiaron y muestra qué se cambió en el contenido.

$git shortlog : muestra los commits de un usuario.

$git log -N : limitamos el número de commits a N.

$git log --after="2022-8-3" --before="today" : commits filtrados por fecha.

$git log --author="name" : Commits hechos por el autor en cuestión.

$git log -file.ext : Commits del archivo en cuestión.

$git branch new_branch : crea una rama en el proyecto.

$git checkout new_branch : cambiarás la rama actual de trabajo a esa rama.

$git checkout #commit file.ext : realiza el llamado al archivo en su estado según ese commit indicado y lo trae al directorio. (Si quiere guardar esa versión anterior como la actual simplemente haga un commit)

$git rm file.ext : borra el archivo del directorio.

$git rm --cached file.ext : borra el archivo del repositorio y del staging.

$git rm --force file.ext : borra el archivo del directorio, repositorio y staging.

$git reset #commit --soft : volvemos a dicho commit pero conservando el staging.

$git reset #commit --hard : volvemos a dicho commit perdiendo todo el progreso posterior al mismo y lo almacenado en staging.

$git reset HEAD file.ext: resetea el archivo en el staging, porque tal vez no debía subir esos cambios al no estar listos para commitear.

-----------Repositorio-Remoto---------------
$git clone url_repositorio_remoto : descarga archivos e historial de cambios al directorio local y repositorio local.

$git push : sube los commits realizados en el repositorio local al repositorio remoto.

$git fetch : trae los commits del repositorio remoto al repositorio local.

$git merge : actualiza los archivos del directorio local con los commits del repositorio local.

$git merge new_branch : hace la fusión automática de la rama en la que estás ubicado (HEAD) con el último commit de la rama en mensión.

$git pull : trae commits y archivos del repositorio remoto y actualiza los archivos del directorio local y los commits del repositorio local.

$git reset #commit --hard (el --soft deja vivos los commits, el --hard los resetea por completo)

$git remote add origin urldelrepo.com : añade el repositorio online como origen remoto en el repo local.

$git pull origin main --allow-unrelated-histories : realiza el pull del repo online sin importar la diferencia entre commits.

$git tag -a TextoDelTag -m "Descripción de referencia del tag" #commit : asigna una etiqueta al commit referenciado.

$git push --tags : pushea los tags del repo local al repo remoto.

$git tag -d tagName : borra un tag del repositorio según el nombre indicado.

$git push origin :refs/tags/tagname : borra las etiquetas del repositorio remoto que no estén en el repositorio local y añade los cambios.

$git show-branch : muestra las ramas del repositorio local y sus últimos commits.

$git show-branch --all : muestra todos los detalles de todas las ramas incluidas las remotas.

$gitk : (GitKraken) es el software visual que ayuda a realizar seguimiento al flujo de trabajo, commits y ramas del proyecto.

$git push origin branch : sube la rama en cuestión al repositorio remoto.

$git clone url_repo : clona el repositorio remoto en el directorio local.

$git rebase branch : Pega la historia de commits de la rama actual en la que estás a la rama en cuestión. como si hubieras hecho los commits directamente desde el branch en cuestión. (Esto es MUUUUUUUY MALA práctica, sólo se debe usar en local, porque puedes estar sobreescribiendo el repositorio de los avances de todos los avances de otros en el proyecto.)

$git stash : guarda los cambios locales desde el último commit hasta el actual estado del archivo en memoria, puedes cambiar de rama y demás.

$git stash pop : devuelve los cambios almacenados del stash al directorio y los archivos locales.

$git stash list : muestra los stash almacenados.

$git stash drop : elimina los stash de la lista.

$git clean --dry-run : simula una limpieza de archivos duplicados en el projecto y muestra qué archivos serán borrados.

$git clean -f : realiza el borrado de los archivos que se mostraron en el --dry-run.

$git cherry-pick #commit : trae los cambios del commit en cuestión a la rama actual (este commit puede ser de otra rama).

NOTAS:
- Las imágenes son archivos binarios que hacen más pesado al repositorio, una buena práctica es tener dichos archivos aparte del repositorio.

- Para colocar emoticonos como ✌ en VS Code, debes usar la combinación de teclas (windows + .) y te sale el desplegable

- Staging develop, un espacio de desarrollo con un entorno similar al que tendrá el usuario, sin embargo se utiliza para hacer las pruebas antes del deploy. Por lo general estas tareas las revisa el DevOps al igual que se ocupa de mantener actualizadas las versiones entre el master y el staging según sus últimos features.

- Pull Request: es la revisión del feature desarrollado antes de hacer el merge al staging develop. Característica específica de GitHub.

- Entidades HTML: &aacute; = á... cosas de HTML.

- Dicen los comentarios que el cherry-pick es una mala práctica... ya lo sabremos: Ahora lo dice Freddy Vega: porque pasa lo mismo del rebase, sobreescribes la historia.

- Todo lo que sea mala práctica no es para dejar de usar los comandos, es para saber cómo y cuándo usarlos.